// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: lowcode/v1/lowcode.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RowsClient is the client API for Rows service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RowsClient interface {
	RowsCreate(ctx context.Context, in *RowsCreateRequest, opts ...grpc.CallOption) (*RowsCreateReply, error)
	RowsGet(ctx context.Context, in *RowsGetRequest, opts ...grpc.CallOption) (*RowsGetReply, error)
}

type rowsClient struct {
	cc grpc.ClientConnInterface
}

func NewRowsClient(cc grpc.ClientConnInterface) RowsClient {
	return &rowsClient{cc}
}

func (c *rowsClient) RowsCreate(ctx context.Context, in *RowsCreateRequest, opts ...grpc.CallOption) (*RowsCreateReply, error) {
	out := new(RowsCreateReply)
	err := c.cc.Invoke(ctx, "/lowcode.v1.Rows/RowsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowsClient) RowsGet(ctx context.Context, in *RowsGetRequest, opts ...grpc.CallOption) (*RowsGetReply, error) {
	out := new(RowsGetReply)
	err := c.cc.Invoke(ctx, "/lowcode.v1.Rows/RowsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RowsServer is the server API for Rows service.
// All implementations must embed UnimplementedRowsServer
// for forward compatibility
type RowsServer interface {
	RowsCreate(context.Context, *RowsCreateRequest) (*RowsCreateReply, error)
	RowsGet(context.Context, *RowsGetRequest) (*RowsGetReply, error)
	mustEmbedUnimplementedRowsServer()
}

// UnimplementedRowsServer must be embedded to have forward compatible implementations.
type UnimplementedRowsServer struct {
}

func (UnimplementedRowsServer) RowsCreate(context.Context, *RowsCreateRequest) (*RowsCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RowsCreate not implemented")
}
func (UnimplementedRowsServer) RowsGet(context.Context, *RowsGetRequest) (*RowsGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RowsGet not implemented")
}
func (UnimplementedRowsServer) mustEmbedUnimplementedRowsServer() {}

// UnsafeRowsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RowsServer will
// result in compilation errors.
type UnsafeRowsServer interface {
	mustEmbedUnimplementedRowsServer()
}

func RegisterRowsServer(s grpc.ServiceRegistrar, srv RowsServer) {
	s.RegisterService(&Rows_ServiceDesc, srv)
}

func _Rows_RowsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RowsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).RowsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lowcode.v1.Rows/RowsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).RowsCreate(ctx, req.(*RowsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rows_RowsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RowsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowsServer).RowsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lowcode.v1.Rows/RowsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowsServer).RowsGet(ctx, req.(*RowsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rows_ServiceDesc is the grpc.ServiceDesc for Rows service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rows_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lowcode.v1.Rows",
	HandlerType: (*RowsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RowsCreate",
			Handler:    _Rows_RowsCreate_Handler,
		},
		{
			MethodName: "RowsGet",
			Handler:    _Rows_RowsGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lowcode/v1/lowcode.proto",
}
